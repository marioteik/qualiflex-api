--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "business_infos" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"name_corporate_reason" text NOT NULL,
	"cnpj_cpf" text NOT NULL,
	"email" text,
	"phone_fax" text,
	"contact" text,
	"state_registration" text,
	"trade_name" text,
	"modification_date" text,
	"updated_at" timestamp,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"deleted_at" timestamp
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "financial_calculations" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"icms_base" numeric NOT NULL,
	"icms_value" numeric NOT NULL,
	"st_icms_base" numeric NOT NULL,
	"st_icms_value" numeric NOT NULL,
	"fcp_value" numeric NOT NULL,
	"pis_value" numeric NOT NULL,
	"total_product_value" numeric NOT NULL,
	"freight_value" numeric NOT NULL,
	"insurance_value" numeric NOT NULL,
	"discount" numeric NOT NULL,
	"other_expenses" numeric NOT NULL,
	"ipi_value" numeric NOT NULL,
	"cofins_value" numeric NOT NULL,
	"total_invoice_value" numeric NOT NULL,
	"updated_at" timestamp,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"deleted_at" timestamp
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "locations" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"route" varchar(256) NOT NULL,
	"subpremise" text,
	"street_number" text NOT NULL,
	"sublocality" text NOT NULL,
	"locality" varchar(100) NOT NULL,
	"administrative_area_level_1" text NOT NULL,
	"administrative_area_level_2" text,
	"country" text NOT NULL,
	"formatted_address" text NOT NULL,
	"postalCode" varchar(20) NOT NULL,
	"updated_at" timestamp,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"deleted_at" timestamp
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "orders" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"code_reference" text NOT NULL,
	"updated_at" timestamp,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"deleted_at" timestamp,
	CONSTRAINT "orders_code_reference_unique" UNIQUE("code_reference")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "shipment_items_to_orders" (
	"shipment_item_id" uuid NOT NULL,
	"order_id" uuid NOT NULL,
	"updated_at" timestamp,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"deleted_at" timestamp,
	CONSTRAINT "shipment_items_to_orders_shipment_item_id_order_id_pk" PRIMARY KEY("shipment_item_id","order_id")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "shipments_to_orders" (
	"shipment_id" uuid NOT NULL,
	"order_id" uuid NOT NULL,
	"updated_at" timestamp,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"deleted_at" timestamp,
	CONSTRAINT "shipments_to_orders_shipment_id_order_id_pk" PRIMARY KEY("shipment_id","order_id")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "permissions" (
	"id" integer PRIMARY KEY GENERATED ALWAYS AS IDENTITY (sequence name "permissions_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"role" text NOT NULL,
	"parent_id" integer,
	CONSTRAINT "permissions_role_unique" UNIQUE("role")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "role_to_permissions" (
	"role_id" integer NOT NULL,
	"permission_id" integer NOT NULL,
	CONSTRAINT "role_to_permissions_role_id_permission_id_pk" PRIMARY KEY("role_id","permission_id")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "products" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"code" varchar(50) NOT NULL,
	"description" varchar(255) NOT NULL,
	"price" numeric,
	"category" varchar(100),
	"updated_at" timestamp,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"deleted_at" timestamp,
	CONSTRAINT "code_unique" UNIQUE("code")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "profiles" (
	"id" uuid PRIMARY KEY NOT NULL,
	"updated_at" timestamp,
	"username" text,
	"full_name" text,
	"avatar_url" text,
	"website" text,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"deleted_at" timestamp,
	CONSTRAINT "profiles_username_unique" UNIQUE("username"),
	CONSTRAINT "username_length" CHECK (LENGTH
            (
            "profiles"."username"
            )
            >=
            3)
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "roles" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "roles_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"role" text NOT NULL,
	CONSTRAINT "roles_role_unique" UNIQUE("role")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "users_to_roles" (
	"user_id" uuid NOT NULL,
	"role_id" integer NOT NULL,
	CONSTRAINT "users_to_roles_user_id_role_id_pk" PRIMARY KEY("user_id","role_id")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "seamstress" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"internal_code" varchar(10) NOT NULL,
	"location_id" uuid NOT NULL,
	"business_info_id" uuid NOT NULL,
	"updated_at" timestamp,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"deleted_at" timestamp,
	CONSTRAINT "seamstress_internal_code_unique" UNIQUE("internal_code")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "shipment_items" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"shipment_id" uuid NOT NULL,
	"product_id" uuid NOT NULL,
	"unit_id" uuid,
	"quantity" numeric NOT NULL,
	"unit_price" numeric NOT NULL,
	"total_price" numeric GENERATED ALWAYS AS ("shipment_items"."quantity"
            *
            "shipment_items"."unit_price") STORED,
	"updated_at" timestamp,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"deleted_at" timestamp
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "units" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"unit_name" text NOT NULL
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "shipments" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"number" text NOT NULL,
	"access_key" text,
	"series" text NOT NULL,
	"type" text NOT NULL,
	"authorization_protocol" text,
	"issue_date" timestamp NOT NULL,
	"entry_exit_date" timestamp NOT NULL,
	"entry_exit_time" time,
	"recipient_id" uuid NOT NULL,
	"financial_calc_id" uuid NOT NULL,
	"transportation_type" text DEFAULT '1' NOT NULL,
	"updated_at" timestamp,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"deleted_at" timestamp,
	CONSTRAINT "shipments_access_key_unique" UNIQUE("access_key")
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "shipments_to_users" (
	"shipment_id" uuid NOT NULL,
	"user_id" uuid NOT NULL,
	CONSTRAINT "shipments_to_users_shipment_id_user_id_pk" PRIMARY KEY("shipment_id","user_id")
);
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "shipment_items_to_orders" ADD CONSTRAINT "shipment_items_to_orders_shipment_item_id_shipment_items_id_fk" FOREIGN KEY ("shipment_item_id") REFERENCES "public"."shipment_items"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "shipment_items_to_orders" ADD CONSTRAINT "shipment_items_to_orders_order_id_orders_id_fk" FOREIGN KEY ("order_id") REFERENCES "public"."orders"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "shipments_to_orders" ADD CONSTRAINT "shipments_to_orders_shipment_id_shipments_id_fk" FOREIGN KEY ("shipment_id") REFERENCES "public"."shipments"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "shipments_to_orders" ADD CONSTRAINT "shipments_to_orders_order_id_orders_id_fk" FOREIGN KEY ("order_id") REFERENCES "public"."orders"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "permissions" ADD CONSTRAINT "permissions_parent_id_permissions_id_fk" FOREIGN KEY ("parent_id") REFERENCES "public"."permissions"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "role_to_permissions" ADD CONSTRAINT "role_to_permissions_role_id_roles_id_fk" FOREIGN KEY ("role_id") REFERENCES "public"."roles"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "role_to_permissions" ADD CONSTRAINT "role_to_permissions_permission_id_permissions_id_fk" FOREIGN KEY ("permission_id") REFERENCES "public"."permissions"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "profiles" ADD CONSTRAINT "profiles_id_users_id_fk" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "users_to_roles" ADD CONSTRAINT "users_to_roles_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "users_to_roles" ADD CONSTRAINT "users_to_roles_role_id_roles_id_fk" FOREIGN KEY ("role_id") REFERENCES "public"."roles"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "seamstress" ADD CONSTRAINT "seamstress_location_id_locations_id_fk" FOREIGN KEY ("location_id") REFERENCES "public"."locations"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "seamstress" ADD CONSTRAINT "seamstress_business_info_id_business_infos_id_fk" FOREIGN KEY ("business_info_id") REFERENCES "public"."business_infos"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "shipment_items" ADD CONSTRAINT "shipment_items_shipment_id_shipments_id_fk" FOREIGN KEY ("shipment_id") REFERENCES "public"."shipments"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "shipment_items" ADD CONSTRAINT "shipment_items_product_id_products_id_fk" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "shipment_items" ADD CONSTRAINT "shipment_items_unit_id_units_id_fk" FOREIGN KEY ("unit_id") REFERENCES "public"."units"("id") ON DELETE no action ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "shipments" ADD CONSTRAINT "shipments_recipient_id_seamstress_id_fk" FOREIGN KEY ("recipient_id") REFERENCES "public"."seamstress"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "shipments" ADD CONSTRAINT "shipments_financial_calc_id_financial_calculations_id_fk" FOREIGN KEY ("financial_calc_id") REFERENCES "public"."financial_calculations"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "shipments_to_users" ADD CONSTRAINT "shipments_to_users_shipment_id_shipments_id_fk" FOREIGN KEY ("shipment_id") REFERENCES "public"."shipments"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "shipments_to_users" ADD CONSTRAINT "shipments_to_users_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "postal_code_idx" ON "locations" USING btree ("postalCode");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "locality_idx" ON "locations" USING btree ("locality");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "route_idx" ON "locations" USING btree ("route");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "administrative_area_idx" ON "locations" USING btree ("locality","administrative_area_level_1","country");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "shipment_item_to_order_shipment_item_id_idx" ON "shipment_items_to_orders" USING btree ("shipment_item_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "shipment_item_to_order_order_id_idx" ON "shipment_items_to_orders" USING btree ("order_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "shipments_to_order_shipment_id_idx" ON "shipments_to_orders" USING btree ("shipment_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "shipments_to_order_order_id_idx" ON "shipments_to_orders" USING btree ("order_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "parent_idx" ON "permissions" USING btree ("parent_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "code_idx" ON "products" USING btree ("code");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "username_idx" ON "profiles" USING btree ("username");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "shipment_item_id_idx" ON "shipment_items" USING btree ("shipment_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "shipment_item_product_id_idx" ON "shipment_items" USING btree ("product_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "unit_name_idx" ON "units" USING btree ("unit_name");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "number_idx" ON "shipments" USING btree ("number");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "access_key_idx" ON "shipments" USING btree ("access_key");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "issue_date_idx" ON "shipments" USING btree ("issue_date");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "recipient_id_idx" ON "shipments" USING btree ("recipient_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "financial_calc_id_idx" ON "shipments" USING btree ("financial_calc_id");